boston = read.csv("boston.csv")
str(boston)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS==1],boston$LAT[boston$CHAS==1], col = "blue")
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS==1],boston$LAT[boston$CHAS==1], col="blue", pch=19)
points(boston$LON[boston$CHAS==1],boston$LAT[boston$CHAS==1],) col="blue", pch=19
points(boston$LON[boston$CHAS==1],boston$LAT[boston$CHAS==1]), col="blue", pch=19
points(boston$LON[boston$CHAS==1],boston$LAT[boston$CHAS==1]) col="blue", pch=19
points(boston$LON[boston$TRACT,boston$TRACT==3531],boston$LAT[boston$TRACT])
summary(boston$NOX)
points(boston$LON[boston$NOX>=0.55], boston$LAT[boston$NOX>=0.55], col=green)
plot(boston#LAT, boston$MEDV)
$
latlonln = ln(MEDV ~ LAT + LON, data=boston)
latlonln = lm(MEDV ~ LAT + LON, data=boston)
summary(latlonln)
plot(boston$LON, boston$LAT)
plot(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch =19)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch =19)
library(rpart)
library(rpart.plot)
latlontree = rpart(MEDV ~ LAT + LON, data=boston)
prp(latlontree)
fittedvalues = predict(latlontree)
latlontree = rpart(MEDV ~ LAT + LON, data=boston, minbucket=50)
plot(latlontree)
test(latlontree)
text(latlontree)
plot(boston$LON, boston$LAT)
abline(v=-71.07)
plot(boston$LON, boston$LAT)
abline(v=-71.07)
abline(h=42.21)
abline(h=42.17)
plot(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch =19)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch =19)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch =19)
abline(h=42.17)
abline(h=42.21)
library(caTools)
set.seed(123)
split = sample.split(boston$MEDV, SplitRatio = 0.7)
train = subset(boston, split == TRUE)
train = subset(boston, split == FALSE)
linreg = lm(MEDV~ LAT + LON + CRIM + IN + INDUS +  CHAS +  NOX +  RM + AGE + DIS + RAD + TAX + PTRATIO, data=train)
linreg = lm(MEDV~ LAT + LON + CRIM + INDUS +  CHAS +  NOX +  RM + AGE + DIS + RAD + TAX + PTRATIO, data=train)
summary(linreg)
linreg = lm(MEDV~ LAT + LON + CRIM + INDUS + ZN + CHAS +  NOX +  RM + AGE + DIS + RAD + TAX + PTRATIO, data=train)
sum(linreg)
summary(linreg)
linreg.pred = predict(linreg, newdata=test)
tree = rpart(MEDV~ LAT + LON + CRIM + INDUS + ZN + CHAS +  NOX +  RM + AGE + DIS + RAD + TAX + PTRATIO, data=train)
prp(tree)
tree.pred = predict(tree, newdata=test)
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
str(tweets)
tweets$Negative = as.factor(tweets$avg <= -1)
tweets$Negative = as.factor(tweets$Avg <= -1)
table(tweets$Negative)
install.packages("tm")
library(tm)
install.packages("Snowballc")
install.packages("SnowballC")
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus
corpus[[1]]
corpus = tm_map(corpus,tolower)
corpus[[1]]
corpus = tm_map(corpus,removePunctuation)
corpus[[1]]
stopwords("english")[1:10]
corpus = tm_map(corpus,removeWords, c("apple", stopwords("english")))
corpus[[1]]
corpus = tm_map(corpus,stemDocument)
corpus[[1]]
frequencies = DocumentTermMatrix(corpus)
frequencies = DocumentTermMatrix(corpus)
frequencies
frequencies = DocumentTermMatrix(corpus)
